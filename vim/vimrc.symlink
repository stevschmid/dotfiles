" best thing since sliced bread: best things extracted from https://github.com/mislav/vimfiles
set nocompatible
syntax enable
set encoding=utf-8

" paste mode toggle
map <F4> :set invpaste<CR>
" toggle number
nmap <F5> :set number! number?<CR>

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Disable folding by default
set nofoldenable

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " Show invisible characters
" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen
"" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching

" Vundle stuff
set nocompatible               " be iMproved
filetype off                   " required!

" Show keystrokes in status line
set showcmd

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'tpope/vim-rails.git'
" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
" git repos on your local machine (ie. when working on your own plugin)
" Bundle 'file:///Users/gmarik/path/to/plugin'
" ...

" Custom bundleros
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
colorscheme Tomorrow-Night-Eighties

Bundle 'tpope/vim-surround'
Bundle 'kien/ctrlp.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'thoughtbot/vim-rspec'
Bundle 'tpope/vim-dispatch'
"Bundle 'Valloric/YouCompleteMe' Lags a tad bit too much. Maybe we have to
"copy the mvim vim as the doc suggests
Bundle 'netdata/vim-puppet'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-endwise'
Bundle 'sjl/gundo.vim'
Bundle 'scrooloose/syntastic'
Bundle 'bling/vim-airline'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'docunext/closetag.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'scrooloose/nerdtree'
Bundle 'rking/ag.vim'
Bundle 'tpope/vim-markdown'
Bundle 'itspriddle/vim-marked'
Bundle 'tpope/vim-commentary'
Bundle 'ervandew/supertab'
Bundle 'tpope/vim-repeat'
Bundle 'moll/vim-bbye'
Bundle 'tpope/vim-unimpaired'

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..


" BIND ALL THE KEYS!
" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

"
" MinIBufExplorer Switching
noremap <F1> :MBEbp<CR>
noremap <F2> :MBEbn<CR>

" same appearance as your line number column
highlight clear SignColumn

" vim rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" stuff
" http://robots.thoughtbot.com/post/58056673303/use-rspec-vim-with-tmux-and-dispatch
let g:rspec_command = "Dispatch rspec {spec}"

" http://stackoverflow.com/questions/5700389/using-vims-persistent-undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" remove trailing spaces
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,javascript,scala autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" enable line numbers by default
set number

" enable line wrapping in the quickfix window
autocmd FileType qf setlocal wrap linebreak

" wildthingy
set wildchar=<Tab> wildmenu wildmode=full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=coverage/**
set wildignore+=*.png,*.jpg,*.gif
set wildcharm=<C-Z>
nnoremap <Tab><Tab> :b <C-Z>

" Gundo it all
nnoremap <F6> :GundoToggle<CR>

""" vim-airline
"" detection of whitespace errors
let g:airline#extensions#whitespace#enabled = 1
" customize the whitespace symbol
let g:airline#extensions#whitespace#symbol = '!'
" configure which whitespace checks to enable
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
" configure whether a message should be displayed
let g:airline#extensions#whitespace#show_message = 1
" configure the formatting of the warning messages
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'

" fancy airline statusbar
let g:airline_powerline_fonts = 1

set laststatus=2

" http://robots.thoughtbot.com/how-to-copy-and-paste-with-tmux-on-mac-os-x
set clipboard=unnamed
" Ignore ng data attributes
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

" clear the search buffer when hitting return
":nnoremap <CR> :nohlsearch<cr>

" toggle NERDtree with ctrl+n
map <C-n> :NERDTreeToggle<CR>

" git gutter symbols
let g:gitgutter_sign_added = '⇒'
let g:gitgutter_sign_modified = '⇔'
let g:gitgutter_sign_removed = '⇐'
let g:gitgutter_sign_modified_removed = '⇐'

" nice and sexy profiling hotkeys
nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>

" faster grepping in vim
" http://robots.thoughtbot.com/faster-grepping-in-vim/
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" https://gist.github.com/luxflux/8397645
function GitBranchIssue(fixes)
  let current_branch = system("git rev-parse --abbrev-ref HEAD")
  let ref = substitute(current_branch, '^.\+\/\(\d\+\).\+$', '\1', '')
  if a:fixes == 'true'
    let prefix = 'fixes'
  else
    let prefix = 'refs'
  endif
  return prefix . ' #' . ref
endfunction
iab REFS <C-R>=GitBranchIssue('false')<CR>
iab FIXES <C-R>=GitBranchIssue('true')<CR>

" ctrlP mappings
nnoremap ,f :CtrlP<CR>
nnoremap ,b :CtrlPBuffer<CR>

" make it snappier
set timeoutlen=1000 ttimeoutlen=0

" Automatically set paste mode in Vim when pasting in insert mode
" https://coderwall.com/p/if9mda
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" http://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
map <leader>r :NERDTreeFind<cr>

set arabic
