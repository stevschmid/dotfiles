" vim: filetype=vim

" Load plugins
source ~/.config/nvim/plugins.vim

" My beloved colorscheme
" Important!!
if has('termguicolors')
  set termguicolors
endif

set background=dark
" Set contrast.
" This configuration option should be placed before `colorscheme gruvbox-material`.
" Available values: 'hard', 'medium'(default), 'soft'
" let g:gruvbox_material_background = 'hard'
" let g:gruvbox_material_transparent_background=1
" colorscheme gruvbox-material
colorscheme everforest

" Load mappings
source ~/.config/nvim/mappings.vim

" GENERAL VIM
" Enable syntax highlighting
syntax enable

" Shell
set shell=bash

" Cursorline
set nocursorline
" set relativenumber

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Disable folding by default
set nofoldenable

set incsearch

" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " Show invisible characters
" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen

" set showcmd " Super laggy DansGame with it on
set number " enable line numbers by default

" autocmd FileType qf setlocal wrap linebreak " enable line wrapping in the quickfix window

" remove trailing spaces
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,cpp,java,php,ruby,python,javascript,scala,elixir,md,markdown,slim autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" persistent undo
" http://stackoverflow.com/questions/5700389/using-vims-persistent-undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" http://robots.thoughtbot.com/how-to-copy-and-paste-with-tmux-on-mac-os-x
set clipboard=unnamed

" make it snappier
set timeoutlen=1000 ttimeoutlen=0

" Automatically set paste mode in Vim when pasting in insert mode
" https://coderwall.com/p/if9mda
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" FILE FORMATS
" C++
" Indent C++ scope declarations to 0 chars
set cino=g0

" PLUGIN SETTINGS

" vim-gitgutter
" same appearance as your line number column
highlight clear SignColumn

set laststatus=2

" vim-gitgutter symbols
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '--'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_modified_removed = '~_'

" fix slow loading of ftplugin/ruby.vim
let g:ruby_path = system('rbenv prefix')

" NERDTree
" automatically close NerdTree when you open a file
" let NERDTreeQuitOnOpen = 1
" automatically close a tab if the only remaining window is NerdTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" misc
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

let loaded_netrwPlugin=1
let NERDTreeRespectWildIgnore=1
let NERDTreeWinSize=60

" use clang format
" autocmd FileType c,cpp setlocal equalprg=clang-format\ -style=file\ -assume-filename=%
autocmd FileType c,cpp,objc map <buffer> = <Plug>(operator-clang-format)

" FZF
let $FZF_DEFAULT_COMMAND = 'rg --files'

" https://github.com/neoclide/coc.nvim/issues/4038#issuecomment-1211198509
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
\ coc#pum#visible() ? coc#pum#next(1):
\ <SID>check_back_space() ? "\<Tab>" :
\ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

" let vim-test use dispatch
let test#strategy = "dispatch"
let g:dispatch_quickfix_height = 40
