" Load plugins
source ~/.config/nvim/plugins.vim

" My beloved colorscheme
colo gruvbox
set background=dark

" Load mappings
source ~/.config/nvim/mappings.vim

" GENERAL VIM
" Enable syntax highlighting
syntax enable

" Shell
set shell=bash

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Disable folding by default
set nofoldenable

set nohlsearch                      " highlight matches
set incsearch                     " incremental searching

" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " Show invisible characters
" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen

set showcmd " Show keystrokes in status line
set number " enable line numbers by default

autocmd FileType qf setlocal wrap linebreak " enable line wrapping in the quickfix window

" remove trailing spaces
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,cpp,java,php,ruby,python,javascript,scala,elixir autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" persistent undo
" http://stackoverflow.com/questions/5700389/using-vims-persistent-undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" http://robots.thoughtbot.com/how-to-copy-and-paste-with-tmux-on-mac-os-x
set clipboard=unnamed

" make it snappier
set timeoutlen=1000 ttimeoutlen=0

" Automatically set paste mode in Vim when pasting in insert mode
" https://coderwall.com/p/if9mda
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" FILE FORMATS
" C++
" Indent C++ scope declarations to 0 chars
set cino=g0

" PLUGIN SETTINGS

" vim-gitgutter
" same appearance as your line number column
highlight clear SignColumn

" vim-airline
let g:airline#extensions#whitespace#enabled = 1
" customize the whitespace symbol
let g:airline#extensions#whitespace#symbol = '!'
" configure which whitespace checks to enable
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
" configure whether a message should be displayed
let g:airline#extensions#whitespace#show_message = 1
" configure the formatting of the warning messages
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'
" fancy airline statusbar
let g:airline_powerline_fonts = 1
" always show status bar
set laststatus=2

" vim-gitgutter symbols
let g:gitgutter_sign_added = '⇒'
let g:gitgutter_sign_modified = '⇔'
let g:gitgutter_sign_removed = '⇐'
let g:gitgutter_sign_modified_removed = '⇐'

" syntastic
let g:syntastic_error_symbol='X'
let g:syntastic_warning_symbol='!'

" ctrl-p and ag
" faster grepping in vim
" http://robots.thoughtbot.com/faster-grepping-in-vim/
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" use pymatcher for maximum warp speed
if !has('python')
    echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

" vimgo
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
